{"is_source_file": true, "format": "Python", "description": "This file defines a base repository class for database operations using SQLAlchemy with async sessions. It provides generic methods for executing statements, fetching scalars, committing transactions, and adding entities, serving as a foundational component for data access layers.", "external_files": ["sqlalchemy", "sqlalchemy.ext.asyncio"], "external_methods": ["sqlalchemy.Executablen", "sqlalchemy.ext.asyncio.AsyncSession.execute", "sqlalchemy.ext.asyncio.AsyncSession.commit", "sqlalchemy.orm.Session.add", "sqlalchemy.orm.Session.add_all"], "published": ["BaseRepository"], "classes": [{"name": "BaseRepository", "description": "A base class for repositories providing common database interaction helpers using an async SQLAlchemy session."}], "methods": [{"name": "None __init__(self, session: AsyncSession)", "description": "Initializes the repository with an async database session.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "execute(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "description": "Executes a SQL statement asynchronously.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "scalars(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "description": "Executes a statement and returns scalar results.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "scalar_one_or_none(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "description": "Executes a statement and returns a single scalar result or None.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "None commit(self)", "description": "Commits the current transaction asynchronously.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "None add_all(self, entities: Iterable[Any])", "description": "Adds multiple entities to the session.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "None add(self, entity: Any)", "description": "Adds a single entity to the session.", "scope": "BaseRepository", "scopeKind": "class"}], "calls": ["self.session.execute", "result.scalars", "result.scalar_one_or_none", "self.session.commit", "self.session.add_all", "self.session.add"], "search-terms": ["BaseRepository", "async session", "SQLAlchemy", "repository pattern", "database helper"], "state": 2, "file_id": 31, "knowledge_revision": 69, "git_revision": "", "ctags": [{"_type": "tag", "name": "BaseRepository", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^class BaseRepository:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    def __init__(self, session: AsyncSession) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, session: AsyncSession)", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "add", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def add(self, entity: Any) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, entity: Any)", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "add_all", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def add_all(self, entities: Iterable[Any]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, entities: Iterable[Any])", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "commit", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def commit(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "execute", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def execute(self, statement: Executable, params: Optional[dict[str, Any]] = None):$/", "language": "Python", "kind": "member", "signature": "(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "scalar_one_or_none", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def scalar_one_or_none(self, statement: Executable, params: Optional[dict[str, Any]] =/", "language": "Python", "kind": "member", "signature": "(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "scalars", "path": "/home/kavia/workspace/code-generation/manufacturing-cloud-suite-159949-159959/manufacturing_api/src/repositories/base.py", "pattern": "/^    async def scalars(self, statement: Executable, params: Optional[dict[str, Any]] = None):$/", "language": "Python", "kind": "member", "signature": "(self, statement: Executable, params: Optional[dict[str, Any]] = None)", "scope": "BaseRepository", "scopeKind": "class"}], "hash": "de7516fa9cb31c7f0e3de577381e1f0d", "format-version": 4, "code-base-name": "manufacturing_api", "filename": "manufacturing_api/src/repositories/base.py", "revision_history": [{"69": ""}]}